// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/word_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6194983983314039808),
      name: 'WordCollectionEntity',
      lastPropertyId: const IdUid(2, 6075736890706687712),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6463211034757868239),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6075736890706687712),
            name: 'collectionName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'foreignWord', srcEntity: 'WordEntity', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 7064767064160354673),
      name: 'WordEntity',
      lastPropertyId: const IdUid(4, 9217508526299095909),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7725326976285858354),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6319704607150194821),
            name: 'foreignTerm',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4111453649979249707),
            name: 'translation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9217508526299095909),
            name: 'collectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 4108732651454080274),
            relationTarget: 'WordCollectionEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7064767064160354673),
      lastIndexId: const IdUid(1, 4108732651454080274),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    WordCollectionEntity: EntityDefinition<WordCollectionEntity>(
        model: _entities[0],
        toOneRelations: (WordCollectionEntity object) => [],
        toManyRelations: (WordCollectionEntity object) => {
              RelInfo<WordEntity>.toOneBacklink(4, object.id,
                      (WordEntity srcObject) => srcObject.collection):
                  object.foreignWord
            },
        getId: (WordCollectionEntity object) => object.id,
        setId: (WordCollectionEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WordCollectionEntity object, fb.Builder fbb) {
          final collectionNameOffset = fbb.writeString(object.collectionName);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, collectionNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WordCollectionEntity(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.foreignWord,
              store,
              RelInfo<WordEntity>.toOneBacklink(
                  4, object.id, (WordEntity srcObject) => srcObject.collection),
              store.box<WordCollectionEntity>());
          return object;
        }),
    WordEntity: EntityDefinition<WordEntity>(
        model: _entities[1],
        toOneRelations: (WordEntity object) => [object.collection],
        toManyRelations: (WordEntity object) => {},
        getId: (WordEntity object) => object.id,
        setId: (WordEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WordEntity object, fb.Builder fbb) {
          final foreignTermOffset = object.foreignTerm == null
              ? null
              : fbb.writeString(object.foreignTerm!);
          final translationOffset = object.translation == null
              ? null
              : fbb.writeString(object.translation!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, foreignTermOffset);
          fbb.addOffset(2, translationOffset);
          fbb.addInt64(3, object.collection.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WordEntity(
              foreignTerm: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              translation: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.collection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.collection.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [WordCollectionEntity] entity fields to define ObjectBox queries.
class WordCollectionEntity_ {
  /// see [WordCollectionEntity.id]
  static final id =
      QueryIntegerProperty<WordCollectionEntity>(_entities[0].properties[0]);

  /// see [WordCollectionEntity.collectionName]
  static final collectionName =
      QueryStringProperty<WordCollectionEntity>(_entities[0].properties[1]);
}

/// [WordEntity] entity fields to define ObjectBox queries.
class WordEntity_ {
  /// see [WordEntity.id]
  static final id =
      QueryIntegerProperty<WordEntity>(_entities[1].properties[0]);

  /// see [WordEntity.foreignTerm]
  static final foreignTerm =
      QueryStringProperty<WordEntity>(_entities[1].properties[1]);

  /// see [WordEntity.translation]
  static final translation =
      QueryStringProperty<WordEntity>(_entities[1].properties[2]);

  /// see [WordEntity.collection]
  static final collection =
      QueryRelationToOne<WordEntity, WordCollectionEntity>(
          _entities[1].properties[3]);
}
